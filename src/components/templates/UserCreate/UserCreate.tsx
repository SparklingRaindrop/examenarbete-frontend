import Head from 'next/head';
import Link from 'next/link';
import { ChangeEvent, FormEvent, useState } from 'react';
import { Status } from '../../../types/statusCode';
import { post } from '../../../util/api';
import { Button, Container, Input, Text } from '../../elements';
import { Box, Form } from './styled';

type UserInput = {
    email: string;
    username: string;
    password: string;
    confirmPassword: string;
}

type ErrorStatus = {
    isError: boolean;
    error: string;
}

type IsError = {
    email: ErrorStatus;
    username: ErrorStatus;
    password: ErrorStatus;
    confirmPassword: ErrorStatus;
}

const initialUserInput = {
    email: '',
    username: '',
    password: '',
    confirmPassword: '',
};

const initialIsError = {
    email: { isError: false, error: '' },
    username: { isError: false, error: '' },
    password: { isError: false, error: '' },
    confirmPassword: { isError: false, error: '' },
};

export default function UserCreate() {
    const [userInput, setUserInput] = useState<UserInput>(initialUserInput);
    const [isError, setIsError] = useState<IsError>(initialIsError);
    const [isSuccess, setIsSuccess] = useState<boolean>(false);

    async function handleOnSubmit(event: FormEvent) {
        event.preventDefault();
        const response = await post('/auth/user', {
            email: userInput.email,
            username: userInput.username,
            password: userInput.password,
        });
        if (response.status === Status.Created) {
            setIsSuccess(true);
            setUserInput(initialUserInput);
        } else {
            if (response.error) {
                const { error } = response;
                if (error.toLowerCase().includes('password')) {
                    setIsError(prev => ({
                        ...prev,
                        password: { isError: true, error },
                    }));
                } else if (error.toLowerCase().includes('username')) {
                    setIsError(prev => ({
                        ...prev,
                        username: { isError: true, error },
                    }));
                } else if (error.toLowerCase().includes('email')) {
                    setIsError(prev => ({
                        ...prev,
                        email: { isError: true, error },
                    }));
                }
            }
        }
    }

    function handleOnChange(event: ChangeEvent<HTMLInputElement>) {
        if (isError[event.target.id as keyof IsError]) {
            setIsError(prev => ({
                ...prev,
                [event.target.id]: false,
            }));
        }
        setUserInput(prev => ({
            ...prev,
            [event.target.id]: event.target.value,
        }));
    }

    return (
        <>
            <Head>
                <title>Smapp | Smart Meal Plan App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
            </Head>
            <Container>
                <Form onSubmit={handleOnSubmit}>
                    <Input
                        id='email'
                        label='email'
                        value={userInput.email}
                        isError={isError.email}
                        onChange={handleOnChange} />
                    <div>
                        <Input
                            id='username'
                            label='username'
                            value={userInput.username}
                            isError={isError.username}
                            onChange={handleOnChange} />
                        <Text>Username must start an alphabet. It can contain uppercase, lowercase and number.<br /> (minimum 7, maximum 15)</Text>
                    </div>
                    <div>
                        <Input
                            id='password'
                            label='password'
                            type='password'
                            value={userInput.password}
                            isError={isError.password}
                            onChange={handleOnChange} />
                        <Text>Password must contain at least one uppercase, one special character(#$@!%&*?) and one number.<br /> (minimum 8, maximum 15)</Text>
                    </div>
                    <Input
                        id='confirmPassword'
                        label='Confirm password'
                        type='password'
                        value={userInput.confirmPassword}
                        isError={{
                            isError: userInput.confirmPassword !== userInput.password,
                            error: 'It must match password above.'
                        }}
                        onChange={handleOnChange} />
                    <Button
                        label='Create'
                        type='submit'
                        disabled={Object.keys(isError).some(param => isError[param as keyof IsError])} />
                    {isSuccess && <Box>Account Created Successfully<br /><Link href='/login'>Go to Login Page</Link></Box>}
                </Form>
            </Container>
        </>
    )
}